//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2021. 11. 20. 0:06:13
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace Oltas
{

    public partial class cnOltas : DbContext
    {

        public cnOltas() :
            base()
        {
            OnCreated();
        }

        public cnOltas(DbContextOptions<cnOltas> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("csOltas"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Patient> Patients
        {
            get;
            set;
        }

        public virtual DbSet<Institute> Institutes
        {
            get;
            set;
        }

        public virtual DbSet<Vaccine> Vaccines
        {
            get;
            set;
        }

        public virtual DbSet<Physician> Physicians
        {
            get;
            set;
        }

        public virtual DbSet<Loc> Locs
        {
            get;
            set;
        }

        public virtual DbSet<Oltott> Oltotts
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.PatientMapping(modelBuilder);
            this.CustomizePatientMapping(modelBuilder);

            this.InstituteMapping(modelBuilder);
            this.CustomizeInstituteMapping(modelBuilder);

            this.VaccineMapping(modelBuilder);
            this.CustomizeVaccineMapping(modelBuilder);

            this.PhysicianMapping(modelBuilder);
            this.CustomizePhysicianMapping(modelBuilder);

            this.LocMapping(modelBuilder);
            this.CustomizeLocMapping(modelBuilder);

            this.OltottMapping(modelBuilder);
            this.CustomizeOltottMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Patient Mapping

        private void PatientMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Patient>().ToTable(@"Patients");
            modelBuilder.Entity<Patient>().Property(x => x.id).HasColumnName(@"id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Patient>().Property(x => x.name).HasColumnName(@"name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Patient>().Property(x => x.zip).HasColumnName(@"zip").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Patient>().Property(x => x.address).HasColumnName(@"address").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Patient>().HasKey(@"id");
        }

        partial void CustomizePatientMapping(ModelBuilder modelBuilder);

        #endregion

        #region Institute Mapping

        private void InstituteMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Institute>().ToTable(@"Institutes");
            modelBuilder.Entity<Institute>().Property(x => x.id).HasColumnName(@"id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Institute>().Property(x => x.instituteName).HasColumnName(@"instituteName").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Institute>().Property(x => x.zip).HasColumnName(@"zip").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Institute>().HasKey(@"id");
        }

        partial void CustomizeInstituteMapping(ModelBuilder modelBuilder);

        #endregion

        #region Vaccine Mapping

        private void VaccineMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Vaccine>().ToTable(@"Vaccines");
            modelBuilder.Entity<Vaccine>().Property(x => x.id).HasColumnName(@"id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Vaccine>().Property(x => x.name).HasColumnName(@"name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Vaccine>().Property(x => x.serial).HasColumnName(@"serial").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Vaccine>().HasKey(@"id");
        }

        partial void CustomizeVaccineMapping(ModelBuilder modelBuilder);

        #endregion

        #region Physician Mapping

        private void PhysicianMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Physician>().ToTable(@"Physicians");
            modelBuilder.Entity<Physician>().Property(x => x.pecsetszam).HasColumnName(@"pecsetszam").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Physician>().Property(x => x.dr_name).HasColumnName(@"dr_name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Physician>().HasKey(@"pecsetszam");
        }

        partial void CustomizePhysicianMapping(ModelBuilder modelBuilder);

        #endregion

        #region Loc Mapping

        private void LocMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Loc>().ToTable(@"Locs");
            modelBuilder.Entity<Loc>().Property(x => x.zip).HasColumnName(@"zip").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Loc>().Property(x => x.telepules).HasColumnName(@"telepules").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Loc>().HasKey(@"zip");
        }

        partial void CustomizeLocMapping(ModelBuilder modelBuilder);

        #endregion

        #region Oltott Mapping

        private void OltottMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Oltott>().ToTable(@"Oltotts");
            modelBuilder.Entity<Oltott>().Property(x => x.id).HasColumnName(@"id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Oltott>().Property(x => x.patient).HasColumnName(@"patient").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Oltott>().Property(x => x.taj).HasColumnName(@"taj").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Oltott>().Property(x => x.oltanyag).HasColumnName(@"oltanyag").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Oltott>().Property(x => x.serialnumber).HasColumnName(@"serialnumber").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Oltott>().Property(x => x.time).HasColumnName(@"time").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Oltott>().Property(x => x.orvosnev).HasColumnName(@"orvosnev").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Oltott>().Property(x => x.orvospecset).HasColumnName(@"orvospecset").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Oltott>().Property(x => x.intezmeny).HasColumnName(@"intezmeny").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Oltott>().HasKey(@"id");
        }

        partial void CustomizeOltottMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Patient>().HasMany(x => x.Institutes).WithMany(op => op.Patients);
            modelBuilder.Entity<Patient>().HasMany(x => x.Vaccines).WithMany(op => op.Patients);
            modelBuilder.Entity<Patient>().HasMany(x => x.Physicians).WithMany(op => op.Patients);
            modelBuilder.Entity<Patient>().HasOne(x => x.Loc).WithMany(op => op.Patients).HasForeignKey(@"zip").IsRequired(true);
            modelBuilder.Entity<Institute>().HasMany(x => x.Physicians).WithMany(op => op.Institutes);

            modelBuilder.Entity<Loc>().HasMany(x => x.Patients).WithOne(op => op.Loc).HasForeignKey(@"zip").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
